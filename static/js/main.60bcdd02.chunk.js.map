{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Scroll.js","robots.js","components/ErrorBaundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Card","props","src","name","alt","email","CardList","robots","cardsArray","map","user","i","key","id","Scroll","console","log","style","overflowY","border","height","children","username","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60bcdd02.chunk.js","sourcesContent":["import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange }) =>{\n    return(\n        <div className='pa2'>\n            <input \n            className = 'pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots'\n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Card = (props) => {\n    return(\n        <div className='bg-white dib br3 pa3 ma2 grow bw2 shadow-5'> \n        {/* the above are tachyons css classes that make the dev much much faster */}\n            <img src={`https://robohash.org/${props.name}?200x200`} alt='robots' />\n            <div>\n                <h2>{props.name}</h2>\n                <p>{props.email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) =>{\n\n    // if(true) {\n    //     throw new Error('NOOOO!');\n    // }\n\n    const cardsArray = robots.map((user, i) => {\n        return (\n        <Card \n            key={i}\n            id={robots[i].id} \n            name={robots[i].name} \n            email={robots[i].email}\n            />\n        )\n    });\n    return(\n        <div>\n            { cardsArray }\n        </div>\n    );\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    console.log(props);\n    return (\n        <div style={{overflowY:'scroll', border:'1px solid black', height:'650px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","export const robots = [\n    {\n        id:1,\n        name:'Orlando Barrera Perez',\n        username: 'Orlando',\n        email:'ojbarrer@uwaterloo.ca'\n    },\n    {\n        id: 5,\n        name: 'James Constable',\n        username: 'james',\n        email: 'james@gmail.com'\n    },\n    {\n        id:3,\n        name:'Shirley Constable',\n        username: 'shirley',\n        email:'shirley@gmail.com'\n    },\n    {\n        id:2,\n        name:'Anne Constable',\n        username: 'anne',\n        email:'anne@gmail.com'\n    },\n    {\n        id:4,\n        name:'Grace Constable',\n        username: 'grace',\n        email:'grace@gmail.com'\n    },\n    {\n        id: 6,\n        name: 'Mrs. Dennis Schulist',\n        username: 'Leopoldo_Corkery',\n        email: 'Karley_Dach@jasper.info'\n    },\n    {\n        id: 7,\n        name: 'Kurtis Weissnat',\n        username: 'Elwyn.Skiles',\n        email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n        id: 8,\n        name: 'Nicholas Runolfsdottir V',\n        username: 'Maxime_Nienow',\n        email: 'Sherwood@rosamond.me'\n    },\n    {\n        id: 9,\n        name: 'Glenna Reichert',\n        username: 'Delphine',\n        email: 'Chaim_McDermott@dana.io'\n    },\n    {\n        id: 10,\n        name: 'Clementina DuBuque',\n        username: 'Moriah.Stanton',\n        email: 'Rey.Padberg@karina.biz'\n    }\n];","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError : false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) return <h1>Oooooops, that's not good</h1>\n        else return this.props.children        \n    }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport SearchBox from '../components/SearchBox';\nimport CardList from '../components/CardList';\n// import {robots} from './robots';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport { robots } from '../robots';\nimport ErrorBoundary from '../components/ErrorBaundary';\n\nclass App extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}))\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n    }\n\n    render(){\n        const filteredRobots = this.state.robots.filter(  \n            (robot) =>{\n            return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        if (!robots.length) {\n            return <h1>Loading</h1>\n        } else {\n            return(\n                <div className='tc'>\n                    <h1 className= 'f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>             \n                </div>\n            );\n        }        \n    }    \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// import { robots } from './robots';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}